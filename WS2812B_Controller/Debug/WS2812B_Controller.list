
WS2812B_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004300  08004300  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004300  08004300  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004300  08004300  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004304  08004304  00005304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004308  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000cdc  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ce8  20000ce8  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d604  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1d  00000000  00000000  00013640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  00015260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a8  00000000  00000000  00015ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9fd  00000000  00000000  00016850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef96  00000000  00000000  0003124d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0d6d  00000000  00000000  000401e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e0f50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003394  00000000  00000000  000e0f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000e4328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042b0 	.word	0x080042b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080042b0 	.word	0x080042b0

080001c8 <check_color_bounds>:
// Global Variables
uint16_t pwm_data_stream[ (NUM_LEDS * DATA_SIZE) + RESET_CODE_LENGTH] = {0};

// Function Definitions
void check_color_bounds(int* green, int* red, int* blue)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	if (*green > 255)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2bff      	cmp	r3, #255	@ 0xff
 80001da:	dd03      	ble.n	80001e4 <check_color_bounds+0x1c>
		*green = 255;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	22ff      	movs	r2, #255	@ 0xff
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	e006      	b.n	80001f2 <check_color_bounds+0x2a>
	else if (*green < 0)
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da02      	bge.n	80001f2 <check_color_bounds+0x2a>
		*green = 0;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]

	if (*red > 255)
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2bff      	cmp	r3, #255	@ 0xff
 80001f8:	dd03      	ble.n	8000202 <check_color_bounds+0x3a>
		*red = 255;
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	22ff      	movs	r2, #255	@ 0xff
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	e006      	b.n	8000210 <check_color_bounds+0x48>
	else if (*red < 0)
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	da02      	bge.n	8000210 <check_color_bounds+0x48>
		*red = 0;
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]

	if (*blue > 255)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2bff      	cmp	r3, #255	@ 0xff
 8000216:	dd03      	ble.n	8000220 <check_color_bounds+0x58>
		*blue = 255;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	22ff      	movs	r2, #255	@ 0xff
 800021c:	601a      	str	r2, [r3, #0]
	else if (*blue < 0)
		*blue = 0;

}
 800021e:	e006      	b.n	800022e <check_color_bounds+0x66>
	else if (*blue < 0)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	da02      	bge.n	800022e <check_color_bounds+0x66>
		*blue = 0;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <send_data>:
void send_data(int led_colors[NUM_LEDS][NUM_COLORS])
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	@ 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	//led_colors is a 2D array where each column holds 3 colors in Green Red Blue order

	uint32_t color_data;
	int stream_idx = 0; // PWM data stream index to convert the 2D array of colors -> 1D stream of data to be sent to LEDs
 8000244:	2300      	movs	r3, #0
 8000246:	61fb      	str	r3, [r7, #28]

	for(int i = 0; i < NUM_LEDS; i++)
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
 800024c:	e042      	b.n	80002d4 <send_data+0x98>
	{
		// For every LED, the binary should follow 24 bits. Bits 24->17 = green, 16->9 = red, 8->1 = blue.
		color_data = (led_colors[i][0] << 16) | (led_colors[i][1] << 8) | (led_colors[i][2]);
 800024e:	69ba      	ldr	r2, [r7, #24]
 8000250:	4613      	mov	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4413      	add	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	461a      	mov	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	0419      	lsls	r1, r3, #16
 8000262:	69ba      	ldr	r2, [r7, #24]
 8000264:	4613      	mov	r3, r2
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	4413      	add	r3, r2
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	461a      	mov	r2, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4413      	add	r3, r2
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	021b      	lsls	r3, r3, #8
 8000276:	4319      	orrs	r1, r3
 8000278:	69ba      	ldr	r2, [r7, #24]
 800027a:	4613      	mov	r3, r2
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	4413      	add	r3, r2
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	461a      	mov	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4413      	add	r3, r2
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	430b      	orrs	r3, r1
 800028c:	60fb      	str	r3, [r7, #12]

		// Iterate through the bits of color data and transform it into the PWM DMA stream.
		for(int j = DATA_SIZE - 1; j >= 0; j++)
 800028e:	2317      	movs	r3, #23
 8000290:	617b      	str	r3, [r7, #20]
 8000292:	e019      	b.n	80002c8 <send_data+0x8c>
		{
			if(color_data & (1 << i))
 8000294:	2201      	movs	r2, #1
 8000296:	69bb      	ldr	r3, [r7, #24]
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	461a      	mov	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	4013      	ands	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d005      	beq.n	80002b2 <send_data+0x76>
				pwm_data_stream[stream_idx] = CODE_1_COMPARE;
 80002a6:	4a19      	ldr	r2, [pc, #100]	@ (800030c <send_data+0xd0>)
 80002a8:	69fb      	ldr	r3, [r7, #28]
 80002aa:	2133      	movs	r1, #51	@ 0x33
 80002ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80002b0:	e004      	b.n	80002bc <send_data+0x80>
			else
				pwm_data_stream[stream_idx] = CODE_0_COMPARE;
 80002b2:	4a16      	ldr	r2, [pc, #88]	@ (800030c <send_data+0xd0>)
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	211a      	movs	r1, #26
 80002b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			stream_idx++;
 80002bc:	69fb      	ldr	r3, [r7, #28]
 80002be:	3301      	adds	r3, #1
 80002c0:	61fb      	str	r3, [r7, #28]
		for(int j = DATA_SIZE - 1; j >= 0; j++)
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	3301      	adds	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	dae2      	bge.n	8000294 <send_data+0x58>
	for(int i = 0; i < NUM_LEDS; i++)
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	3301      	adds	r3, #1
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	2b3b      	cmp	r3, #59	@ 0x3b
 80002d8:	ddb9      	ble.n	800024e <send_data+0x12>
		}
	}

	// Fill the end of the data stream with 0's to instantiate a reset code
	for(int i = 0; i < RESET_CODE_LENGTH; i++) {
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
 80002de:	e00a      	b.n	80002f6 <send_data+0xba>
		pwm_data_stream[stream_idx] = 0;
 80002e0:	4a0a      	ldr	r2, [pc, #40]	@ (800030c <send_data+0xd0>)
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	2100      	movs	r1, #0
 80002e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		stream_idx++;
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3301      	adds	r3, #1
 80002ee:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < RESET_CODE_LENGTH; i++) {
 80002f0:	693b      	ldr	r3, [r7, #16]
 80002f2:	3301      	adds	r3, #1
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	2b31      	cmp	r3, #49	@ 0x31
 80002fa:	ddf1      	ble.n	80002e0 <send_data+0xa4>
	}

}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	3724      	adds	r7, #36	@ 0x24
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000028 	.word	0x20000028

08000310 <change_color>:
void change_color(int green, int red, int blue)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	f5ad 7d3a 	sub.w	sp, sp, #744	@ 0x2e8
 8000316:	af00      	add	r7, sp, #0
 8000318:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800031c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8000320:	6018      	str	r0, [r3, #0]
 8000322:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000326:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800032a:	6019      	str	r1, [r3, #0]
 800032c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000330:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8000334:	601a      	str	r2, [r3, #0]
	check_color_bounds(&green, &red, &blue);
 8000336:	1d3a      	adds	r2, r7, #4
 8000338:	f107 0108 	add.w	r1, r7, #8
 800033c:	f107 030c 	add.w	r3, r7, #12
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff41 	bl	80001c8 <check_color_bounds>
	int led_colors[NUM_LEDS][NUM_COLORS];

	for(int i = 0; i < NUM_LEDS; i++)
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800034c:	e039      	b.n	80003c2 <change_color+0xb2>
	{
		led_colors[i][0] = green;
 800034e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000352:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800035c:	f5a3 7035 	sub.w	r0, r3, #724	@ 0x2d4
 8000360:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8000364:	4613      	mov	r3, r2
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	4413      	add	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4403      	add	r3, r0
 800036e:	6019      	str	r1, [r3, #0]
		led_colors[i][1] = red;
 8000370:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000374:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8000378:	6819      	ldr	r1, [r3, #0]
 800037a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800037e:	f5a3 7035 	sub.w	r0, r3, #724	@ 0x2d4
 8000382:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8000386:	4613      	mov	r3, r2
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4403      	add	r3, r0
 8000390:	3304      	adds	r3, #4
 8000392:	6019      	str	r1, [r3, #0]
		led_colors[i][2] = blue;
 8000394:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000398:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 800039c:	6819      	ldr	r1, [r3, #0]
 800039e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80003a2:	f5a3 7035 	sub.w	r0, r3, #724	@ 0x2d4
 80003a6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80003aa:	4613      	mov	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	4413      	add	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4403      	add	r3, r0
 80003b4:	3308      	adds	r3, #8
 80003b6:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < NUM_LEDS; i++)
 80003b8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80003bc:	3301      	adds	r3, #1
 80003be:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80003c2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80003c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80003c8:	ddc1      	ble.n	800034e <change_color+0x3e>
	}

	send_data(led_colors);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff34 	bl	800023c <send_data>
}
 80003d4:	bf00      	nop
 80003d6:	f507 773a 	add.w	r7, r7, #744	@ 0x2e8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fab4 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f81e 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 f922 	bl	8000634 <MX_GPIO_Init>
  MX_DMA_Init();
 80003f0:	f000 f902 	bl	80005f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003f4:	f000 f8d0 	bl	8000598 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80003f8:	f000 f858 	bl	80004ac <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  change_color(255, 0, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2100      	movs	r1, #0
 8000400:	20ff      	movs	r0, #255	@ 0xff
 8000402:	f7ff ff85 	bl	8000310 <change_color>
	  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwm_data_stream, NUM_LEDS * DATA_SIZE + RESET_CODE_LENGTH);
 8000406:	f240 53d2 	movw	r3, #1490	@ 0x5d2
 800040a:	4a05      	ldr	r2, [pc, #20]	@ (8000420 <main+0x40>)
 800040c:	2100      	movs	r1, #0
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <main+0x44>)
 8000410:	f002 fa58 	bl	80028c4 <HAL_TIM_PWM_Start_DMA>
	  HAL_Delay(1000);
 8000414:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000418:	f000 fb00 	bl	8000a1c <HAL_Delay>
	  change_color(255, 0, 0);
 800041c:	bf00      	nop
 800041e:	e7ed      	b.n	80003fc <main+0x1c>
 8000420:	20000028 	.word	0x20000028
 8000424:	20000bcc 	.word	0x20000bcc

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b090      	sub	sp, #64	@ 0x40
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 ff0d 	bl	8004256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000452:	2310      	movs	r3, #16
 8000454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	2302      	movs	r3, #2
 8000458:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045a:	2300      	movs	r3, #0
 800045c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800045e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4618      	mov	r0, r3
 800046a:	f000 ff15 	bl	8001298 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000474:	f000 f902 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2302      	movs	r3, #2
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f001 ff3e 	bl	8002314 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800049e:	f000 f8ed 	bl	800067c <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	@ 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08e      	sub	sp, #56	@ 0x38
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c0:	f107 031c 	add.w	r3, r7, #28
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004de:	4b2c      	ldr	r3, [pc, #176]	@ (8000590 <MX_TIM3_Init+0xe4>)
 80004e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000594 <MX_TIM3_Init+0xe8>)
 80004e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <MX_TIM3_Init+0xe4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b29      	ldr	r3, [pc, #164]	@ (8000590 <MX_TIM3_Init+0xe4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80-1;
 80004f0:	4b27      	ldr	r3, [pc, #156]	@ (8000590 <MX_TIM3_Init+0xe4>)
 80004f2:	224f      	movs	r2, #79	@ 0x4f
 80004f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f6:	4b26      	ldr	r3, [pc, #152]	@ (8000590 <MX_TIM3_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fc:	4b24      	ldr	r3, [pc, #144]	@ (8000590 <MX_TIM3_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000502:	4823      	ldr	r0, [pc, #140]	@ (8000590 <MX_TIM3_Init+0xe4>)
 8000504:	f002 f926 	bl	8002754 <HAL_TIM_Base_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800050e:	f000 f8b5 	bl	800067c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000516:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000518:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800051c:	4619      	mov	r1, r3
 800051e:	481c      	ldr	r0, [pc, #112]	@ (8000590 <MX_TIM3_Init+0xe4>)
 8000520:	f002 fcea 	bl	8002ef8 <HAL_TIM_ConfigClockSource>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800052a:	f000 f8a7 	bl	800067c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800052e:	4818      	ldr	r0, [pc, #96]	@ (8000590 <MX_TIM3_Init+0xe4>)
 8000530:	f002 f967 	bl	8002802 <HAL_TIM_PWM_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800053a:	f000 f89f 	bl	800067c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	4619      	mov	r1, r3
 800054c:	4810      	ldr	r0, [pc, #64]	@ (8000590 <MX_TIM3_Init+0xe4>)
 800054e:	f003 fa75 	bl	8003a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000558:	f000 f890 	bl	800067c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800055c:	2360      	movs	r3, #96	@ 0x60
 800055e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	4619      	mov	r1, r3
 8000572:	4807      	ldr	r0, [pc, #28]	@ (8000590 <MX_TIM3_Init+0xe4>)
 8000574:	f002 fbac 	bl	8002cd0 <HAL_TIM_PWM_ConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800057e:	f000 f87d 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <MX_TIM3_Init+0xe4>)
 8000584:	f000 f8f4 	bl	8000770 <HAL_TIM_MspPostInit>

}
 8000588:	bf00      	nop
 800058a:	3738      	adds	r7, #56	@ 0x38
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000bcc 	.word	0x20000bcc
 8000594:	40000400 	.word	0x40000400

08000598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800059c:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 800059e:	4a15      	ldr	r2, [pc, #84]	@ (80005f4 <MX_USART2_UART_Init+0x5c>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005a2:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005a4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <MX_USART2_UART_Init+0x58>)
 80005dc:	f003 fa9c 	bl	8003b18 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005e6:	f000 f849 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000c5c 	.word	0x20000c5c
 80005f4:	40004400 	.word	0x40004400

080005f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_DMA_Init+0x38>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <MX_DMA_Init+0x38>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_DMA_Init+0x38>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2010      	movs	r0, #16
 800061c:	f000 fafd 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000620:	2010      	movs	r0, #16
 8000622:	f000 fb16 	bl	8000c52 <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_GPIO_Init+0x44>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <MX_GPIO_Init+0x44>)
 8000640:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_GPIO_Init+0x44>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_GPIO_Init+0x44>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <MX_GPIO_Init+0x44>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_GPIO_Init+0x44>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <Error_Handler+0x8>

08000688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <HAL_MspInit+0x44>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <HAL_MspInit+0x44>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a08      	ldr	r2, [pc, #32]	@ (80006cc <HAL_MspInit+0x44>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <HAL_MspInit+0x44>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a20      	ldr	r2, [pc, #128]	@ (8000760 <HAL_TIM_Base_MspInit+0x90>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d139      	bne.n	8000756 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <HAL_TIM_Base_MspInit+0x94>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000764 <HAL_TIM_Base_MspInit+0x94>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <HAL_TIM_Base_MspInit+0x94>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <HAL_TIM_Base_MspInit+0x9c>)
 80006fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000702:	2210      	movs	r2, #16
 8000704:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000718:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 800071c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000720:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000730:	f000 faa9 	bl	8000c86 <HAL_DMA_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800073a:	f7ff ff9f 	bl	800067c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a09      	ldr	r2, [pc, #36]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
 8000744:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 800074e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000750:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <HAL_TIM_Base_MspInit+0x98>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40000400 	.word	0x40000400
 8000764:	40021000 	.word	0x40021000
 8000768:	20000c18 	.word	0x20000c18
 800076c:	4002006c 	.word	0x4002006c

08000770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a11      	ldr	r2, [pc, #68]	@ (80007d4 <HAL_TIM_MspPostInit+0x64>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d11c      	bne.n	80007cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_TIM_MspPostInit+0x68>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <HAL_TIM_MspPostInit+0x68>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_TIM_MspPostInit+0x68>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_TIM_Pin;
 80007aa:	2340      	movs	r3, #64	@ 0x40
 80007ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_TIM_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c8:	f000 fbf4 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40000400 	.word	0x40000400
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a18      	ldr	r2, [pc, #96]	@ (800085c <HAL_UART_MspInit+0x80>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d129      	bne.n	8000852 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <HAL_UART_MspInit+0x84>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <HAL_UART_MspInit+0x84>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <HAL_UART_MspInit+0x84>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <HAL_UART_MspInit+0x84>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a11      	ldr	r2, [pc, #68]	@ (8000860 <HAL_UART_MspInit+0x84>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <HAL_UART_MspInit+0x84>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800082e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000840:	2307      	movs	r3, #7
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f000 fbb1 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ba:	f000 f88f 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80008c8:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <DMA1_Channel6_IRQHandler+0x10>)
 80008ca:	f000 fa82 	bl	8000dd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000c18 	.word	0x20000c18

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f003 fc9d 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092e:	f7ff fd57 	bl	80003e0 <main>

08000932 <LoopForever>:

LoopForever:
    b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000934:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000940:	08004308 	.word	0x08004308
  ldr r2, =_sbss
 8000944:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000948:	20000ce8 	.word	0x20000ce8

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>
	...

08000950 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f94f 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fe8c 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f967 	bl	8000c6e <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b8:	f000 f92f 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000ce4 	.word	0x20000ce4

08000a04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000ce4 	.word	0x20000ce4

08000a1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	@ 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff29 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff3e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff8e 	bl	8000b58 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff31 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffa2 	bl	8000bc0 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e037      	b.n	8000d0c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000cb2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f940 	bl	8000f74 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_DMA_Start_IT+0x20>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e04a      	b.n	8000dca <HAL_DMA_Start_IT+0xb6>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d13a      	bne.n	8000dbc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2202      	movs	r2, #2
 8000d4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f000 f8d4 	bl	8000f18 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 020e 	orr.w	r2, r2, #14
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e00f      	b.n	8000daa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f042 020a 	orr.w	r2, r2, #10
 8000d98:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0204 	bic.w	r2, r2, #4
 8000da8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0201 	orr.w	r2, r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e005      	b.n	8000dc8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	2204      	movs	r2, #4
 8000df0:	409a      	lsls	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d024      	beq.n	8000e44 <HAL_DMA_IRQHandler+0x72>
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d01f      	beq.n	8000e44 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0204 	bic.w	r2, r2, #4
 8000e20:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d06a      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e42:	e065      	b.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	2202      	movs	r2, #2
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d02c      	beq.n	8000eae <HAL_DMA_IRQHandler+0xdc>
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d027      	beq.n	8000eae <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10b      	bne.n	8000e84 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 020a 	bic.w	r2, r2, #10
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d035      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000eac:	e030      	b.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d028      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d023      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 020e 	bic.w	r2, r2, #14
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	4798      	blx	r3
    }
  }
}
 8000f0e:	e7ff      	b.n	8000f10 <HAL_DMA_IRQHandler+0x13e>
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b10      	cmp	r3, #16
 8000f44:	d108      	bne.n	8000f58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f56:	e007      	b.n	8000f68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <DMA_CalcBaseAndBitshift+0x34>)
 8000f84:	4413      	add	r3, r2
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <DMA_CalcBaseAndBitshift+0x38>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	009a      	lsls	r2, r3, #2
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <DMA_CalcBaseAndBitshift+0x3c>)
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	bffdfff8 	.word	0xbffdfff8
 8000fac:	cccccccd 	.word	0xcccccccd
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e14e      	b.n	8001262 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8140 	beq.w	800125c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0203 	and.w	r2, r3, #3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 809a 	beq.w	800125c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b55      	ldr	r3, [pc, #340]	@ (8001280 <HAL_GPIO_Init+0x2cc>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a54      	ldr	r2, [pc, #336]	@ (8001280 <HAL_GPIO_Init+0x2cc>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b52      	ldr	r3, [pc, #328]	@ (8001280 <HAL_GPIO_Init+0x2cc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001140:	4a50      	ldr	r2, [pc, #320]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800116a:	d013      	beq.n	8001194 <HAL_GPIO_Init+0x1e0>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a46      	ldr	r2, [pc, #280]	@ (8001288 <HAL_GPIO_Init+0x2d4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1dc>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a45      	ldr	r2, [pc, #276]	@ (800128c <HAL_GPIO_Init+0x2d8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1d8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a44      	ldr	r2, [pc, #272]	@ (8001290 <HAL_GPIO_Init+0x2dc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1d4>
 8001184:	2303      	movs	r3, #3
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x1e2>
 8001188:	2305      	movs	r3, #5
 800118a:	e004      	b.n	8001196 <HAL_GPIO_Init+0x1e2>
 800118c:	2302      	movs	r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x1e2>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_GPIO_Init+0x1e2>
 8001194:	2300      	movs	r3, #0
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4093      	lsls	r3, r2
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a6:	4937      	ldr	r1, [pc, #220]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b4:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011de:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001202:	4a24      	ldr	r2, [pc, #144]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001208:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001256:	4a0f      	ldr	r2, [pc, #60]	@ (8001294 <HAL_GPIO_Init+0x2e0>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	f47f aea9 	bne.w	8000fc4 <HAL_GPIO_Init+0x10>
  }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800
 8001290:	48000c00 	.word	0x48000c00
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800129e:	af00      	add	r7, sp, #0
 80012a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f001 b823 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 817d 	beq.w	80015ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012d4:	4bbc      	ldr	r3, [pc, #752]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d00c      	beq.n	80012fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e0:	4bb9      	ldr	r3, [pc, #740]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d15c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x10e>
 80012ec:	4bb6      	ldr	r3, [pc, #728]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f8:	d155      	bne.n	80013a6 <HAL_RCC_OscConfig+0x10e>
 80012fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012fe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800130e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d102      	bne.n	800132c <HAL_RCC_OscConfig+0x94>
 8001326:	4ba8      	ldr	r3, [pc, #672]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	e015      	b.n	8001358 <HAL_RCC_OscConfig+0xc0>
 800132c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001330:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001340:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001344:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001348:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001354:	4b9c      	ldr	r3, [pc, #624]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800135c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001360:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001364:	fa92 f2a2 	rbit	r2, r2
 8001368:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800136c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001370:	fab2 f282 	clz	r2, r2
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f042 0220 	orr.w	r2, r2, #32
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	f002 021f 	and.w	r2, r2, #31
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 811f 	beq.w	80015cc <HAL_RCC_OscConfig+0x334>
 800138e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001392:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 8116 	bne.w	80015cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f000 bfaf 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12e>
 80013b8:	4b83      	ldr	r3, [pc, #524]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a82      	ldr	r2, [pc, #520]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e036      	b.n	8001434 <HAL_RCC_OscConfig+0x19c>
 80013c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x158>
 80013d6:	4b7c      	ldr	r3, [pc, #496]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7b      	ldr	r2, [pc, #492]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b79      	ldr	r3, [pc, #484]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a78      	ldr	r2, [pc, #480]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e021      	b.n	8001434 <HAL_RCC_OscConfig+0x19c>
 80013f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x184>
 8001402:	4b71      	ldr	r3, [pc, #452]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a70      	ldr	r2, [pc, #448]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6e      	ldr	r3, [pc, #440]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6d      	ldr	r2, [pc, #436]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0x19c>
 800141c:	4b6a      	ldr	r3, [pc, #424]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a69      	ldr	r2, [pc, #420]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b67      	ldr	r3, [pc, #412]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a66      	ldr	r2, [pc, #408]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001432:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001434:	4b64      	ldr	r3, [pc, #400]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001438:	f023 020f 	bic.w	r2, r3, #15
 800143c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	495f      	ldr	r1, [pc, #380]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 800144a:	4313      	orrs	r3, r2
 800144c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d059      	beq.n	8001512 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fad1 	bl	8000a04 <HAL_GetTick>
 8001462:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e00a      	b.n	800147e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff facc 	bl	8000a04 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b64      	cmp	r3, #100	@ 0x64
 8001476:	d902      	bls.n	800147e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	f000 bf43 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
 800147e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001482:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001492:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	095b      	lsrs	r3, r3, #5
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d102      	bne.n	80014b0 <HAL_RCC_OscConfig+0x218>
 80014aa:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	e015      	b.n	80014dc <HAL_RCC_OscConfig+0x244>
 80014b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80014c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80014cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80014d8:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014e0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80014e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80014e8:	fa92 f2a2 	rbit	r2, r2
 80014ec:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80014f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80014f4:	fab2 f282 	clz	r2, r2
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	f042 0220 	orr.w	r2, r2, #32
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	f002 021f 	and.w	r2, r2, #31
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ab      	beq.n	8001468 <HAL_RCC_OscConfig+0x1d0>
 8001510:	e05d      	b.n	80015ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fa77 	bl	8000a04 <HAL_GetTick>
 8001516:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fa72 	bl	8000a04 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	@ 0x64
 800152a:	d902      	bls.n	8001532 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	f000 bee9 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
 8001532:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001536:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001546:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	095b      	lsrs	r3, r3, #5
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d102      	bne.n	8001564 <HAL_RCC_OscConfig+0x2cc>
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	e015      	b.n	8001590 <HAL_RCC_OscConfig+0x2f8>
 8001564:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001568:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001578:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800157c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001580:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_RCC_OscConfig+0x330>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001594:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001598:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800159c:	fa92 f2a2 	rbit	r2, r2
 80015a0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80015a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80015a8:	fab2 f282 	clz	r2, r2
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	f042 0220 	orr.w	r2, r2, #32
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	f002 021f 	and.w	r2, r2, #31
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ab      	bne.n	800151c <HAL_RCC_OscConfig+0x284>
 80015c4:	e003      	b.n	80015ce <HAL_RCC_OscConfig+0x336>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 817d 	beq.w	80018de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015e4:	4ba6      	ldr	r3, [pc, #664]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015f0:	4ba3      	ldr	r3, [pc, #652]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d172      	bne.n	80016e2 <HAL_RCC_OscConfig+0x44a>
 80015fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d16c      	bne.n	80016e2 <HAL_RCC_OscConfig+0x44a>
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800161a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	095b      	lsrs	r3, r3, #5
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <HAL_RCC_OscConfig+0x3a0>
 8001632:	4b93      	ldr	r3, [pc, #588]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e013      	b.n	8001660 <HAL_RCC_OscConfig+0x3c8>
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001650:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800165c:	4b88      	ldr	r3, [pc, #544]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	2202      	movs	r2, #2
 8001662:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001666:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001672:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f002 021f 	and.w	r2, r2, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00a      	beq.n	80016a8 <HAL_RCC_OscConfig+0x410>
 8001692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001696:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d002      	beq.n	80016a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f000 be2e 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b75      	ldr	r3, [pc, #468]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	21f8      	movs	r1, #248	@ 0xf8
 80016be:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80016c6:	fa91 f1a1 	rbit	r1, r1
 80016ca:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80016ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80016d2:	fab1 f181 	clz	r1, r1
 80016d6:	b2c9      	uxtb	r1, r1
 80016d8:	408b      	lsls	r3, r1
 80016da:	4969      	ldr	r1, [pc, #420]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e0:	e0fd      	b.n	80018de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8088 	beq.w	8001804 <HAL_RCC_OscConfig+0x56c>
 80016f4:	2301      	movs	r3, #1
 80016f6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001706:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001714:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	461a      	mov	r2, r3
 800171c:	2301      	movs	r3, #1
 800171e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff f970 	bl	8000a04 <HAL_GetTick>
 8001724:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff f96b 	bl	8000a04 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d902      	bls.n	8001740 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	f000 bde2 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
 8001740:	2302      	movs	r3, #2
 8001742:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001752:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <HAL_RCC_OscConfig+0x4d8>
 800176a:	4b45      	ldr	r3, [pc, #276]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e013      	b.n	8001798 <HAL_RCC_OscConfig+0x500>
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001788:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001794:	4b3a      	ldr	r3, [pc, #232]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	2202      	movs	r2, #2
 800179a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800179e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80017a2:	fa92 f2a2 	rbit	r2, r2
 80017a6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80017aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80017ae:	fab2 f282 	clz	r2, r2
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	f042 0220 	orr.w	r2, r2, #32
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	f002 021f 	and.w	r2, r2, #31
 80017be:	2101      	movs	r1, #1
 80017c0:	fa01 f202 	lsl.w	r2, r1, r2
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0af      	beq.n	800172a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	21f8      	movs	r1, #248	@ 0xf8
 80017e0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80017e8:	fa91 f1a1 	rbit	r1, r1
 80017ec:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80017f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80017f4:	fab1 f181 	clz	r1, r1
 80017f8:	b2c9      	uxtb	r1, r1
 80017fa:	408b      	lsls	r3, r1
 80017fc:	4920      	ldr	r1, [pc, #128]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
 8001802:	e06c      	b.n	80018de <HAL_RCC_OscConfig+0x646>
 8001804:	2301      	movs	r3, #1
 8001806:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001816:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001824:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	461a      	mov	r2, r3
 800182c:	2300      	movs	r3, #0
 800182e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff f8e8 	bl	8000a04 <HAL_GetTick>
 8001834:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff f8e3 	bl	8000a04 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d902      	bls.n	8001850 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	f000 bd5a 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
 8001850:	2302      	movs	r3, #2
 8001852:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001862:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d104      	bne.n	8001884 <HAL_RCC_OscConfig+0x5ec>
 800187a:	4b01      	ldr	r3, [pc, #4]	@ (8001880 <HAL_RCC_OscConfig+0x5e8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e015      	b.n	80018ac <HAL_RCC_OscConfig+0x614>
 8001880:	40021000 	.word	0x40021000
 8001884:	2302      	movs	r3, #2
 8001886:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800189c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80018a8:	4bc8      	ldr	r3, [pc, #800]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	2202      	movs	r2, #2
 80018ae:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80018b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018b6:	fa92 f2a2 	rbit	r2, r2
 80018ba:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80018be:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80018c2:	fab2 f282 	clz	r2, r2
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f042 0220 	orr.w	r2, r2, #32
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f002 021f 	and.w	r2, r2, #31
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ad      	bne.n	800183a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8110 	beq.w	8001b14 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d079      	beq.n	80019f8 <HAL_RCC_OscConfig+0x760>
 8001904:	2301      	movs	r3, #1
 8001906:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	4bab      	ldr	r3, [pc, #684]	@ (8001bd0 <HAL_RCC_OscConfig+0x938>)
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	461a      	mov	r2, r3
 800192a:	2301      	movs	r3, #1
 800192c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff f869 	bl	8000a04 <HAL_GetTick>
 8001932:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff f864 	bl	8000a04 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d902      	bls.n	800194e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	f000 bcdb 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a8:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 80019aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80019b4:	2102      	movs	r1, #2
 80019b6:	6019      	str	r1, [r3, #0]
 80019b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f1a3 	rbit	r1, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019ce:	6019      	str	r1, [r3, #0]
  return result;
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0a0      	beq.n	8001938 <HAL_RCC_OscConfig+0x6a0>
 80019f6:	e08d      	b.n	8001b14 <HAL_RCC_OscConfig+0x87c>
 80019f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a1a:	601a      	str	r2, [r3, #0]
  return result;
 8001a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b68      	ldr	r3, [pc, #416]	@ (8001bd0 <HAL_RCC_OscConfig+0x938>)
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	461a      	mov	r2, r3
 8001a36:	2300      	movs	r3, #0
 8001a38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe ffe3 	bl	8000a04 <HAL_GetTick>
 8001a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a44:	f7fe ffde 	bl	8000a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d902      	bls.n	8001a5a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f000 bc55 	b.w	8002304 <HAL_RCC_OscConfig+0x106c>
 8001a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a86:	2202      	movs	r2, #2
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fa93 f2a3 	rbit	r2, r3
 8001abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ac4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 8001ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ace:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	6019      	str	r1, [r3, #0]
 8001ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ada:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f1a3 	rbit	r1, r3
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001aec:	6019      	str	r1, [r3, #0]
  return result;
 8001aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d197      	bne.n	8001a44 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 81a1 	beq.w	8001e6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d116      	bne.n	8001b6a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 8001b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	61d3      	str	r3, [r2, #28]
 8001b48:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001b62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <HAL_RCC_OscConfig+0x93c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11a      	bne.n	8001bac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <HAL_RCC_OscConfig+0x93c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a16      	ldr	r2, [pc, #88]	@ (8001bd4 <HAL_RCC_OscConfig+0x93c>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7fe ff3f 	bl	8000a04 <HAL_GetTick>
 8001b86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7fe ff3a 	bl	8000a04 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	@ 0x64
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e3b1      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <HAL_RCC_OscConfig+0x93c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ef      	beq.n	8001b8c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x940>
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a02      	ldr	r2, [pc, #8]	@ (8001bcc <HAL_RCC_OscConfig+0x934>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e03c      	b.n	8001c44 <HAL_RCC_OscConfig+0x9ac>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	10908120 	.word	0x10908120
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10c      	bne.n	8001c02 <HAL_RCC_OscConfig+0x96a>
 8001be8:	4bc1      	ldr	r3, [pc, #772]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4ac0      	ldr	r2, [pc, #768]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	4bbe      	ldr	r3, [pc, #760]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4abd      	ldr	r2, [pc, #756]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001bfa:	f023 0304 	bic.w	r3, r3, #4
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	e020      	b.n	8001c44 <HAL_RCC_OscConfig+0x9ac>
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x994>
 8001c12:	4bb7      	ldr	r3, [pc, #732]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4ab6      	ldr	r2, [pc, #728]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	4bb4      	ldr	r3, [pc, #720]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4ab3      	ldr	r2, [pc, #716]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_OscConfig+0x9ac>
 8001c2c:	4bb0      	ldr	r3, [pc, #704]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4aaf      	ldr	r2, [pc, #700]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	4bad      	ldr	r3, [pc, #692]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4aac      	ldr	r2, [pc, #688]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001c3e:	f023 0304 	bic.w	r3, r3, #4
 8001c42:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8081 	beq.w	8001d58 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7fe fed5 	bl	8000a04 <HAL_GetTick>
 8001c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7fe fed0 	bl	8000a04 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e345      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fa93 f2a3 	rbit	r2, r3
 8001cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cbe:	601a      	str	r2, [r3, #0]
  return result;
 8001cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xa4c>
 8001cde:	4b84      	ldr	r3, [pc, #528]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	e013      	b.n	8001d0c <HAL_RCC_OscConfig+0xa74>
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cec:	2202      	movs	r2, #2
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b79      	ldr	r3, [pc, #484]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d10:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001d14:	2102      	movs	r1, #2
 8001d16:	6011      	str	r1, [r2, #0]
 8001d18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d1c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	fa92 f1a2 	rbit	r1, r2
 8001d26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d2a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d2e:	6011      	str	r1, [r2, #0]
  return result;
 8001d30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d34:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	fab2 f282 	clz	r2, r2
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f002 021f 	and.w	r2, r2, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d084      	beq.n	8001c60 <HAL_RCC_OscConfig+0x9c8>
 8001d56:	e07f      	b.n	8001e58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe fe54 	bl	8000a04 <HAL_GetTick>
 8001d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	e00b      	b.n	8001d7a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7fe fe4f 	bl	8000a04 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e2c4      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d82:	2202      	movs	r2, #2
 8001d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d98:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dc0:	601a      	str	r2, [r3, #0]
  return result;
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0xb4e>
 8001de0:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	e013      	b.n	8001e0e <HAL_RCC_OscConfig+0xb76>
 8001de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dee:	2202      	movs	r2, #2
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e12:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001e16:	2102      	movs	r1, #2
 8001e18:	6011      	str	r1, [r2, #0]
 8001e1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e1e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	fa92 f1a2 	rbit	r1, r2
 8001e28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e2c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e30:	6011      	str	r1, [r2, #0]
  return result;
 8001e32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e36:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d184      	bne.n	8001d62 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e58:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	4a22      	ldr	r2, [pc, #136]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8242 	beq.w	8002302 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <HAL_RCC_OscConfig+0xc58>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	f000 8213 	beq.w	80022b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f040 8162 	bne.w	8002162 <HAL_RCC_OscConfig+0xeca>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001ea6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ecc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ed8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fd8e 	bl	8000a04 <HAL_GetTick>
 8001ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	e00c      	b.n	8001f08 <HAL_RCC_OscConfig+0xc70>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe fd86 	bl	8000a04 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1fd      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
 8001f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f2c:	601a      	str	r2, [r3, #0]
  return result;
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_OscConfig+0xcba>
 8001f4c:	4bb0      	ldr	r3, [pc, #704]	@ (8002210 <HAL_RCC_OscConfig+0xf78>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e027      	b.n	8001fa2 <HAL_RCC_OscConfig+0xd0a>
 8001f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f56:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f64:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	fa93 f2a3 	rbit	r2, r3
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8002210 <HAL_RCC_OscConfig+0xf78>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fa6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001faa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fae:	6011      	str	r1, [r2, #0]
 8001fb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fb4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	fa92 f1a2 	rbit	r1, r2
 8001fbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001fc6:	6011      	str	r1, [r2, #0]
  return result;
 8001fc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fcc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f042 0220 	orr.w	r2, r2, #32
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d182      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fee:	4b88      	ldr	r3, [pc, #544]	@ (8002210 <HAL_RCC_OscConfig+0xf78>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	430b      	orrs	r3, r1
 8002010:	497f      	ldr	r1, [pc, #508]	@ (8002210 <HAL_RCC_OscConfig+0xf78>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
 8002016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800201e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800203a:	601a      	str	r2, [r3, #0]
  return result;
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002044:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002050:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	461a      	mov	r2, r3
 8002058:	2301      	movs	r3, #1
 800205a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe fcd2 	bl	8000a04 <HAL_GetTick>
 8002060:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	e009      	b.n	800207a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002066:	f7fe fccd 	bl	8000a04 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e144      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
 800207a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002082:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fa93 f2a3 	rbit	r2, r3
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800209e:	601a      	str	r2, [r3, #0]
  return result;
 80020a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80020a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_OscConfig+0xe2c>
 80020be:	4b54      	ldr	r3, [pc, #336]	@ (8002210 <HAL_RCC_OscConfig+0xf78>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e027      	b.n	8002114 <HAL_RCC_OscConfig+0xe7c>
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80020cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80020f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	4b3f      	ldr	r3, [pc, #252]	@ (8002210 <HAL_RCC_OscConfig+0xf78>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002118:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800211c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002120:	6011      	str	r1, [r2, #0]
 8002122:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002126:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	fa92 f1a2 	rbit	r1, r2
 8002130:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002134:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002138:	6011      	str	r1, [r2, #0]
  return result;
 800213a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800213e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	fab2 f282 	clz	r2, r2
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	f042 0220 	orr.w	r2, r2, #32
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f002 021f 	and.w	r2, r2, #31
 8002154:	2101      	movs	r1, #1
 8002156:	fa01 f202 	lsl.w	r2, r1, r2
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d082      	beq.n	8002066 <HAL_RCC_OscConfig+0xdce>
 8002160:	e0cf      	b.n	8002302 <HAL_RCC_OscConfig+0x106a>
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800216a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800216e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002174:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	fa93 f2a3 	rbit	r2, r3
 800217e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002182:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002186:	601a      	str	r2, [r3, #0]
  return result;
 8002188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002190:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800219c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	461a      	mov	r2, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fc2c 	bl	8000a04 <HAL_GetTick>
 80021ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	e009      	b.n	80021c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe fc27 	bl	8000a04 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e09e      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80021ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80021ea:	601a      	str	r2, [r3, #0]
  return result;
 80021ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80021f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <HAL_RCC_OscConfig+0xf7c>
 800220a:	4b01      	ldr	r3, [pc, #4]	@ (8002210 <HAL_RCC_OscConfig+0xf78>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	e029      	b.n	8002264 <HAL_RCC_OscConfig+0xfcc>
 8002210:	40021000 	.word	0x40021000
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800221c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002242:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	fa93 f2a3 	rbit	r2, r3
 8002256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	4b2b      	ldr	r3, [pc, #172]	@ (8002310 <HAL_RCC_OscConfig+0x1078>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002268:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800226c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002270:	6011      	str	r1, [r2, #0]
 8002272:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002276:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	fa92 f1a2 	rbit	r1, r2
 8002280:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002284:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002288:	6011      	str	r1, [r2, #0]
  return result;
 800228a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800228e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	f002 021f 	and.w	r2, r2, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f202 	lsl.w	r2, r1, r2
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d180      	bne.n	80021b2 <HAL_RCC_OscConfig+0xf1a>
 80022b0:	e027      	b.n	8002302 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e01e      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_RCC_OscConfig+0x1078>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80022d2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d10b      	bne.n	80022fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80022e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80022ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b09e      	sub	sp, #120	@ 0x78
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e162      	b.n	80025f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b90      	ldr	r3, [pc, #576]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b8d      	ldr	r3, [pc, #564]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	498b      	ldr	r1, [pc, #556]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b89      	ldr	r3, [pc, #548]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e14a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b82      	ldr	r3, [pc, #520]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	497f      	ldr	r1, [pc, #508]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80dc 	beq.w	8002540 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d13c      	bne.n	800240a <HAL_RCC_ClockConfig+0xf6>
 8002390:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002394:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800239e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_ClockConfig+0xa6>
 80023b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e00f      	b.n	80023da <HAL_RCC_ClockConfig+0xc6>
 80023ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80023c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023d6:	4b67      	ldr	r3, [pc, #412]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80023e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023e2:	fa92 f2a2 	rbit	r2, r2
 80023e6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80023e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80023ea:	fab2 f282 	clz	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f002 021f 	and.w	r2, r2, #31
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d17b      	bne.n	80024fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0f3      	b.n	80025f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d13c      	bne.n	800248c <HAL_RCC_ClockConfig+0x178>
 8002412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002416:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_RCC_ClockConfig+0x128>
 8002436:	4b4f      	ldr	r3, [pc, #316]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	e00f      	b.n	800245c <HAL_RCC_ClockConfig+0x148>
 800243c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002440:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	647b      	str	r3, [r7, #68]	@ 0x44
 800244a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800244e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002458:	4b46      	ldr	r3, [pc, #280]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002460:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002464:	fa92 f2a2 	rbit	r2, r2
 8002468:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800246a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800246c:	fab2 f282 	clz	r2, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f042 0220 	orr.w	r2, r2, #32
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f002 021f 	and.w	r2, r2, #31
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f202 	lsl.w	r2, r1, r2
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d13a      	bne.n	80024fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b2      	b.n	80025f2 <HAL_RCC_ClockConfig+0x2de>
 800248c:	2302      	movs	r3, #2
 800248e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d102      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a0>
 80024ae:	4b31      	ldr	r3, [pc, #196]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	e00d      	b.n	80024d0 <HAL_RCC_ClockConfig+0x1bc>
 80024b4:	2302      	movs	r3, #2
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c0:	2302      	movs	r3, #2
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	2202      	movs	r2, #2
 80024d2:	61ba      	str	r2, [r7, #24]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	fa92 f2a2 	rbit	r2, r2
 80024da:	617a      	str	r2, [r7, #20]
  return result;
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	fab2 f282 	clz	r2, r2
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f042 0220 	orr.w	r2, r2, #32
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	f002 021f 	and.w	r2, r2, #31
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e079      	b.n	80025f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	491a      	ldr	r1, [pc, #104]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe fa78 	bl	8000a04 <HAL_GetTick>
 8002514:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fa74 	bl	8000a04 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e061      	b.n	80025f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_RCC_ClockConfig+0x260>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d214      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4906      	ldr	r1, [pc, #24]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_RCC_ClockConfig+0x25c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e040      	b.n	80025f2 <HAL_RCC_ClockConfig+0x2de>
 8002570:	40022000 	.word	0x40022000
 8002574:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <HAL_RCC_ClockConfig+0x2e8>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	491a      	ldr	r1, [pc, #104]	@ (80025fc <HAL_RCC_ClockConfig+0x2e8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_RCC_ClockConfig+0x2e8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4912      	ldr	r1, [pc, #72]	@ (80025fc <HAL_RCC_ClockConfig+0x2e8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025b6:	f000 f829 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ba:	4601      	mov	r1, r0
 80025bc:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <HAL_RCC_ClockConfig+0x2e8>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025c4:	22f0      	movs	r2, #240	@ 0xf0
 80025c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	fa92 f2a2 	rbit	r2, r2
 80025ce:	60fa      	str	r2, [r7, #12]
  return result;
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	40d3      	lsrs	r3, r2
 80025da:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <HAL_RCC_ClockConfig+0x2ec>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	fa21 f303 	lsr.w	r3, r1, r3
 80025e2:	4a08      	ldr	r2, [pc, #32]	@ (8002604 <HAL_RCC_ClockConfig+0x2f0>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025e6:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_RCC_ClockConfig+0x2f4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f9c6 	bl	800097c <HAL_InitTick>
  
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3778      	adds	r7, #120	@ 0x78
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	080042c8 	.word	0x080042c8
 8002604:	20000000 	.word	0x20000000
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d002      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x30>
 8002636:	2b08      	cmp	r3, #8
 8002638:	d003      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x36>
 800263a:	e026      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800263c:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800263e:	613b      	str	r3, [r7, #16]
      break;
 8002640:	e026      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	0c9b      	lsrs	r3, r3, #18
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a17      	ldr	r2, [pc, #92]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002650:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002668:	4a0e      	ldr	r2, [pc, #56]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e004      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a0c      	ldr	r2, [pc, #48]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
      break;
 8002688:	e002      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800268c:	613b      	str	r3, [r7, #16]
      break;
 800268e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002690:	693b      	ldr	r3, [r7, #16]
}
 8002692:	4618      	mov	r0, r3
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	007a1200 	.word	0x007a1200
 80026a8:	080042e0 	.word	0x080042e0
 80026ac:	080042f0 	.word	0x080042f0
 80026b0:	003d0900 	.word	0x003d0900

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b03      	ldr	r3, [pc, #12]	@ (80026c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000000 	.word	0x20000000

080026cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026d2:	f7ff ffef 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d6:	4601      	mov	r1, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80026e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	fa92 f2a2 	rbit	r2, r2
 80026ec:	603a      	str	r2, [r7, #0]
  return result;
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	40d3      	lsrs	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x40>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	080042d8 	.word	0x080042d8

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002716:	f7ff ffcd 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 800271a:	4601      	mov	r1, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002724:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002728:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	fa92 f2a2 	rbit	r2, r2
 8002730:	603a      	str	r2, [r7, #0]
  return result;
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	40d3      	lsrs	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x40>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	080042d8 	.word	0x080042d8

08002754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e049      	b.n	80027fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fd ffa8 	bl	80006d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 fd68 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e049      	b.n	80028a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f841 	bl	80028b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2202      	movs	r2, #2
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 fd11 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e03c      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xa6>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d109      	bne.n	800290a <HAL_TIM_PWM_Start_DMA+0x46>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e02f      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xa6>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d109      	bne.n	8002924 <HAL_TIM_PWM_Start_DMA+0x60>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e022      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d109      	bne.n	800293e <HAL_TIM_PWM_Start_DMA+0x7a>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e015      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xa6>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b10      	cmp	r3, #16
 8002942:	d109      	bne.n	8002958 <HAL_TIM_PWM_Start_DMA+0x94>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e008      	b.n	800296a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
 8002970:	e197      	b.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e03c      	b.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x142>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d109      	bne.n	80029a6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e02f      	b.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x142>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d109      	bne.n	80029c0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e022      	b.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x142>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d109      	bne.n	80029da <HAL_TIM_PWM_Start_DMA+0x116>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e015      	b.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x142>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d109      	bne.n	80029f4 <HAL_TIM_PWM_Start_DMA+0x130>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e008      	b.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x142>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d034      	beq.n	8002a74 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_TIM_PWM_Start_DMA+0x152>
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e143      	b.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <HAL_TIM_PWM_Start_DMA+0x166>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a28:	e026      	b.n	8002a78 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d104      	bne.n	8002a3a <HAL_TIM_PWM_Start_DMA+0x176>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a38:	e01e      	b.n	8002a78 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_PWM_Start_DMA+0x186>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a48:	e016      	b.n	8002a78 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_PWM_Start_DMA+0x196>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a58:	e00e      	b.n	8002a78 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a68:	e006      	b.n	8002a78 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a72:	e001      	b.n	8002a78 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e114      	b.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	f200 80ae 	bhi.w	8002bdc <HAL_TIM_PWM_Start_DMA+0x318>
 8002a80:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002bdd 	.word	0x08002bdd
 8002a90:	08002bdd 	.word	0x08002bdd
 8002a94:	08002bdd 	.word	0x08002bdd
 8002a98:	08002b05 	.word	0x08002b05
 8002a9c:	08002bdd 	.word	0x08002bdd
 8002aa0:	08002bdd 	.word	0x08002bdd
 8002aa4:	08002bdd 	.word	0x08002bdd
 8002aa8:	08002b4d 	.word	0x08002b4d
 8002aac:	08002bdd 	.word	0x08002bdd
 8002ab0:	08002bdd 	.word	0x08002bdd
 8002ab4:	08002bdd 	.word	0x08002bdd
 8002ab8:	08002b95 	.word	0x08002b95
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8002cac <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	4a79      	ldr	r2, [pc, #484]	@ (8002cb0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002aca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	4a78      	ldr	r2, [pc, #480]	@ (8002cb4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3334      	adds	r3, #52	@ 0x34
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	f7fe f916 	bl	8000d14 <HAL_DMA_Start_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0d7      	b.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b00:	60da      	str	r2, [r3, #12]
      break;
 8002b02:	e06e      	b.n	8002be2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	4a68      	ldr	r2, [pc, #416]	@ (8002cac <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002b0a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	4a67      	ldr	r2, [pc, #412]	@ (8002cb0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002b12:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	4a66      	ldr	r2, [pc, #408]	@ (8002cb4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3338      	adds	r3, #56	@ 0x38
 8002b28:	461a      	mov	r2, r3
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	f7fe f8f2 	bl	8000d14 <HAL_DMA_Start_IT>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0b3      	b.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b48:	60da      	str	r2, [r3, #12]
      break;
 8002b4a:	e04a      	b.n	8002be2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	4a56      	ldr	r2, [pc, #344]	@ (8002cac <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002b52:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	4a55      	ldr	r2, [pc, #340]	@ (8002cb0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	4a54      	ldr	r2, [pc, #336]	@ (8002cb4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	333c      	adds	r3, #60	@ 0x3c
 8002b70:	461a      	mov	r2, r3
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	f7fe f8ce 	bl	8000d14 <HAL_DMA_Start_IT>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e08f      	b.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b90:	60da      	str	r2, [r3, #12]
      break;
 8002b92:	e026      	b.n	8002be2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	4a44      	ldr	r2, [pc, #272]	@ (8002cac <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002b9a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	4a43      	ldr	r2, [pc, #268]	@ (8002cb0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	4a42      	ldr	r2, [pc, #264]	@ (8002cb4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3340      	adds	r3, #64	@ 0x40
 8002bb8:	461a      	mov	r2, r3
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	f7fe f8aa 	bl	8000d14 <HAL_DMA_Start_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bd8:	60da      	str	r2, [r3, #12]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
      break;
 8002be0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d15b      	bne.n	8002ca0 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fefd 	bl	80039f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_TIM_PWM_Start_DMA+0x35a>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2d      	ldr	r2, [pc, #180]	@ (8002cbc <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_TIM_PWM_Start_DMA+0x35a>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_TIM_PWM_Start_DMA+0x35a>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_PWM_Start_DMA+0x35e>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_TIM_PWM_Start_DMA+0x360>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x39c>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4a:	d009      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x39c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x39c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d115      	bne.n	8002c8c <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_TIM_PWM_Start_DMA+0x408>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d015      	beq.n	8002c9e <HAL_TIM_PWM_Start_DMA+0x3da>
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c78:	d011      	beq.n	8002c9e <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	e008      	b.n	8002c9e <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e000      	b.n	8002ca0 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	08003159 	.word	0x08003159
 8002cb0:	08003201 	.word	0x08003201
 8002cb4:	080030c7 	.word	0x080030c7
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40014000 	.word	0x40014000
 8002cc0:	40014400 	.word	0x40014400
 8002cc4:	40014800 	.word	0x40014800
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	00010007 	.word	0x00010007

08002cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0ff      	b.n	8002eee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b14      	cmp	r3, #20
 8002cfa:	f200 80f0 	bhi.w	8002ede <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d59 	.word	0x08002d59
 8002d08:	08002edf 	.word	0x08002edf
 8002d0c:	08002edf 	.word	0x08002edf
 8002d10:	08002edf 	.word	0x08002edf
 8002d14:	08002d99 	.word	0x08002d99
 8002d18:	08002edf 	.word	0x08002edf
 8002d1c:	08002edf 	.word	0x08002edf
 8002d20:	08002edf 	.word	0x08002edf
 8002d24:	08002ddb 	.word	0x08002ddb
 8002d28:	08002edf 	.word	0x08002edf
 8002d2c:	08002edf 	.word	0x08002edf
 8002d30:	08002edf 	.word	0x08002edf
 8002d34:	08002e1b 	.word	0x08002e1b
 8002d38:	08002edf 	.word	0x08002edf
 8002d3c:	08002edf 	.word	0x08002edf
 8002d40:	08002edf 	.word	0x08002edf
 8002d44:	08002e5d 	.word	0x08002e5d
 8002d48:	08002edf 	.word	0x08002edf
 8002d4c:	08002edf 	.word	0x08002edf
 8002d50:	08002edf 	.word	0x08002edf
 8002d54:	08002e9d 	.word	0x08002e9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fb06 	bl	8003370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0208 	orr.w	r2, r2, #8
 8002d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6999      	ldr	r1, [r3, #24]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	619a      	str	r2, [r3, #24]
      break;
 8002d96:	e0a5      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb6c 	bl	800347c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6999      	ldr	r1, [r3, #24]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      break;
 8002dd8:	e084      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fbcb 	bl	800357c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0208 	orr.w	r2, r2, #8
 8002df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0204 	bic.w	r2, r2, #4
 8002e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
      break;
 8002e18:	e064      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fc29 	bl	8003678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	61da      	str	r2, [r3, #28]
      break;
 8002e5a:	e043      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fc6c 	bl	8003740 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0208 	orr.w	r2, r2, #8
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e9a:	e023      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fcaa 	bl	80037fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002edc:	e002      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop

08002ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIM_ConfigClockSource+0x1c>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0b6      	b.n	8003082 <HAL_TIM_ConfigClockSource+0x18a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f50:	d03e      	beq.n	8002fd0 <HAL_TIM_ConfigClockSource+0xd8>
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f56:	f200 8087 	bhi.w	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5e:	f000 8086 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x176>
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f66:	d87f      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f68:	2b70      	cmp	r3, #112	@ 0x70
 8002f6a:	d01a      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0xaa>
 8002f6c:	2b70      	cmp	r3, #112	@ 0x70
 8002f6e:	d87b      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f70:	2b60      	cmp	r3, #96	@ 0x60
 8002f72:	d050      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x11e>
 8002f74:	2b60      	cmp	r3, #96	@ 0x60
 8002f76:	d877      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f78:	2b50      	cmp	r3, #80	@ 0x50
 8002f7a:	d03c      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0xfe>
 8002f7c:	2b50      	cmp	r3, #80	@ 0x50
 8002f7e:	d873      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f80:	2b40      	cmp	r3, #64	@ 0x40
 8002f82:	d058      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x13e>
 8002f84:	2b40      	cmp	r3, #64	@ 0x40
 8002f86:	d86f      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f88:	2b30      	cmp	r3, #48	@ 0x30
 8002f8a:	d064      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15e>
 8002f8c:	2b30      	cmp	r3, #48	@ 0x30
 8002f8e:	d86b      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d060      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15e>
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d867      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d05c      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15e>
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d05a      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15e>
 8002fa0:	e062      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fb2:	f000 fcfd 	bl	80039b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	609a      	str	r2, [r3, #8]
      break;
 8002fce:	e04f      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fe0:	f000 fce6 	bl	80039b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ff2:	609a      	str	r2, [r3, #8]
      break;
 8002ff4:	e03c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	461a      	mov	r2, r3
 8003004:	f000 fc5a 	bl	80038bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2150      	movs	r1, #80	@ 0x50
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fcb3 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003014:	e02c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	461a      	mov	r2, r3
 8003024:	f000 fc79 	bl	800391a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2160      	movs	r1, #96	@ 0x60
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fca3 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003034:	e01c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	461a      	mov	r2, r3
 8003044:	f000 fc3a 	bl	80038bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2140      	movs	r1, #64	@ 0x40
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fc93 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003054:	e00c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f000 fc8a 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 8003066:	e003      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      break;
 800306c:	e000      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800306e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d107      	bne.n	80030ee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ec:	e02a      	b.n	8003144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2202      	movs	r2, #2
 80030fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003106:	e01d      	b.n	8003144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d107      	bne.n	8003122 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2204      	movs	r2, #4
 8003116:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003120:	e010      	b.n	8003144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	d107      	bne.n	800313c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2208      	movs	r2, #8
 8003130:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800313a:	e003      	b.n	8003144 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff ffb4 	bl	80030b2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d10b      	bne.n	8003188 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d136      	bne.n	80031ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003186:	e031      	b.n	80031ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10b      	bne.n	80031aa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2202      	movs	r2, #2
 8003196:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d125      	bne.n	80031ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a8:	e020      	b.n	80031ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d10b      	bne.n	80031cc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2204      	movs	r2, #4
 80031b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d114      	bne.n	80031ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ca:	e00f      	b.n	80031ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10a      	bne.n	80031ec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2208      	movs	r2, #8
 80031da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff ff4c 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d103      	bne.n	8003220 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	771a      	strb	r2, [r3, #28]
 800321e:	e019      	b.n	8003254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	d103      	bne.n	8003232 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2202      	movs	r2, #2
 800322e:	771a      	strb	r2, [r3, #28]
 8003230:	e010      	b.n	8003254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d103      	bne.n	8003244 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2204      	movs	r2, #4
 8003240:	771a      	strb	r2, [r3, #28]
 8003242:	e007      	b.n	8003254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d102      	bne.n	8003254 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2208      	movs	r2, #8
 8003252:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff ff22 	bl	800309e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a38      	ldr	r2, [pc, #224]	@ (800335c <TIM_Base_SetConfig+0xf4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0x28>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x28>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a35      	ldr	r2, [pc, #212]	@ (8003360 <TIM_Base_SetConfig+0xf8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2d      	ldr	r2, [pc, #180]	@ (800335c <TIM_Base_SetConfig+0xf4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_Base_SetConfig+0x6a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b0:	d00f      	beq.n	80032d2 <TIM_Base_SetConfig+0x6a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003360 <TIM_Base_SetConfig+0xf8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0x6a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a29      	ldr	r2, [pc, #164]	@ (8003364 <TIM_Base_SetConfig+0xfc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0x6a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <TIM_Base_SetConfig+0x100>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0x6a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a27      	ldr	r2, [pc, #156]	@ (800336c <TIM_Base_SetConfig+0x104>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a14      	ldr	r2, [pc, #80]	@ (800335c <TIM_Base_SetConfig+0xf4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00b      	beq.n	8003328 <TIM_Base_SetConfig+0xc0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <TIM_Base_SetConfig+0xfc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0xc0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a13      	ldr	r2, [pc, #76]	@ (8003368 <TIM_Base_SetConfig+0x100>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0xc0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a12      	ldr	r2, [pc, #72]	@ (800336c <TIM_Base_SetConfig+0x104>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d103      	bne.n	8003330 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f023 0201 	bic.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]
  }
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f023 0201 	bic.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 0302 	bic.w	r3, r3, #2
 80033bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a28      	ldr	r2, [pc, #160]	@ (800346c <TIM_OC1_SetConfig+0xfc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <TIM_OC1_SetConfig+0x78>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a27      	ldr	r2, [pc, #156]	@ (8003470 <TIM_OC1_SetConfig+0x100>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_OC1_SetConfig+0x78>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a26      	ldr	r2, [pc, #152]	@ (8003474 <TIM_OC1_SetConfig+0x104>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC1_SetConfig+0x78>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a25      	ldr	r2, [pc, #148]	@ (8003478 <TIM_OC1_SetConfig+0x108>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10c      	bne.n	8003402 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0308 	bic.w	r3, r3, #8
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	@ (800346c <TIM_OC1_SetConfig+0xfc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <TIM_OC1_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <TIM_OC1_SetConfig+0x100>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <TIM_OC1_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <TIM_OC1_SetConfig+0x104>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_OC1_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a16      	ldr	r2, [pc, #88]	@ (8003478 <TIM_OC1_SetConfig+0x108>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d111      	bne.n	8003446 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800

0800347c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f023 0210 	bic.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0320 	bic.w	r3, r3, #32
 80034ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a24      	ldr	r2, [pc, #144]	@ (800356c <TIM_OC2_SetConfig+0xf0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10d      	bne.n	80034fc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <TIM_OC2_SetConfig+0xf0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00b      	beq.n	800351c <TIM_OC2_SetConfig+0xa0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a1a      	ldr	r2, [pc, #104]	@ (8003570 <TIM_OC2_SetConfig+0xf4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_OC2_SetConfig+0xa0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a19      	ldr	r2, [pc, #100]	@ (8003574 <TIM_OC2_SetConfig+0xf8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC2_SetConfig+0xa0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <TIM_OC2_SetConfig+0xfc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d113      	bne.n	8003544 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003522:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800352a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a23      	ldr	r2, [pc, #140]	@ (8003668 <TIM_OC3_SetConfig+0xec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10d      	bne.n	80035fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035f8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003668 <TIM_OC3_SetConfig+0xec>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_OC3_SetConfig+0x9e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a19      	ldr	r2, [pc, #100]	@ (800366c <TIM_OC3_SetConfig+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_OC3_SetConfig+0x9e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a18      	ldr	r2, [pc, #96]	@ (8003670 <TIM_OC3_SetConfig+0xf4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_OC3_SetConfig+0x9e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a17      	ldr	r2, [pc, #92]	@ (8003674 <TIM_OC3_SetConfig+0xf8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d113      	bne.n	8003642 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800

08003678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	031b      	lsls	r3, r3, #12
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a16      	ldr	r2, [pc, #88]	@ (8003730 <TIM_OC4_SetConfig+0xb8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00b      	beq.n	80036f4 <TIM_OC4_SetConfig+0x7c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <TIM_OC4_SetConfig+0xbc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <TIM_OC4_SetConfig+0x7c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <TIM_OC4_SetConfig+0xc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_OC4_SetConfig+0x7c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a13      	ldr	r2, [pc, #76]	@ (800373c <TIM_OC4_SetConfig+0xc4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d109      	bne.n	8003708 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800

08003740 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a15      	ldr	r2, [pc, #84]	@ (80037ec <TIM_OC5_SetConfig+0xac>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_OC5_SetConfig+0x72>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a14      	ldr	r2, [pc, #80]	@ (80037f0 <TIM_OC5_SetConfig+0xb0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_OC5_SetConfig+0x72>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <TIM_OC5_SetConfig+0xb4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_OC5_SetConfig+0x72>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a12      	ldr	r2, [pc, #72]	@ (80037f8 <TIM_OC5_SetConfig+0xb8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d109      	bne.n	80037c6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40014400 	.word	0x40014400
 80037f8:	40014800 	.word	0x40014800

080037fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	051b      	lsls	r3, r3, #20
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a16      	ldr	r2, [pc, #88]	@ (80038ac <TIM_OC6_SetConfig+0xb0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_OC6_SetConfig+0x74>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a15      	ldr	r2, [pc, #84]	@ (80038b0 <TIM_OC6_SetConfig+0xb4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_OC6_SetConfig+0x74>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a14      	ldr	r2, [pc, #80]	@ (80038b4 <TIM_OC6_SetConfig+0xb8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_OC6_SetConfig+0x74>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <TIM_OC6_SetConfig+0xbc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d109      	bne.n	8003884 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800

080038bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 030a 	bic.w	r3, r3, #10
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f023 0210 	bic.w	r2, r3, #16
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003956:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	f043 0307 	orr.w	r3, r3, #7
 800399c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e054      	b.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d108      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abc:	d009      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a13      	ldr	r2, [pc, #76]	@ (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a11      	ldr	r2, [pc, #68]	@ (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10c      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40014000 	.word	0x40014000

08003b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e040      	b.n	8003bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fc fe4e 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	@ 0x24
 8003b44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f95e 	bl	8003e20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f825 	bl	8003bb4 <UART_SetConfig>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e01b      	b.n	8003bac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f9dd 	bl	8003f64 <UART_CheckIdleState>
 8003baa:	4603      	mov	r3, r0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b8a      	ldr	r3, [pc, #552]	@ (8003e08 <UART_SetConfig+0x254>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	6979      	ldr	r1, [r7, #20]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a78      	ldr	r2, [pc, #480]	@ (8003e0c <UART_SetConfig+0x258>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d120      	bne.n	8003c72 <UART_SetConfig+0xbe>
 8003c30:	4b77      	ldr	r3, [pc, #476]	@ (8003e10 <UART_SetConfig+0x25c>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d817      	bhi.n	8003c6c <UART_SetConfig+0xb8>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <UART_SetConfig+0x90>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c61 	.word	0x08003c61
 8003c4c:	08003c67 	.word	0x08003c67
 8003c50:	08003c5b 	.word	0x08003c5b
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e01d      	b.n	8003c96 <UART_SetConfig+0xe2>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e01a      	b.n	8003c96 <UART_SetConfig+0xe2>
 8003c60:	2304      	movs	r3, #4
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e017      	b.n	8003c96 <UART_SetConfig+0xe2>
 8003c66:	2308      	movs	r3, #8
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e014      	b.n	8003c96 <UART_SetConfig+0xe2>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e011      	b.n	8003c96 <UART_SetConfig+0xe2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a67      	ldr	r2, [pc, #412]	@ (8003e14 <UART_SetConfig+0x260>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d102      	bne.n	8003c82 <UART_SetConfig+0xce>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e009      	b.n	8003c96 <UART_SetConfig+0xe2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a64      	ldr	r2, [pc, #400]	@ (8003e18 <UART_SetConfig+0x264>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d102      	bne.n	8003c92 <UART_SetConfig+0xde>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e001      	b.n	8003c96 <UART_SetConfig+0xe2>
 8003c92:	2310      	movs	r3, #16
 8003c94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9e:	d15a      	bne.n	8003d56 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ca0:	7ffb      	ldrb	r3, [r7, #31]
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d827      	bhi.n	8003cf6 <UART_SetConfig+0x142>
 8003ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <UART_SetConfig+0xf8>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fcfc 	bl	80026cc <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61b8      	str	r0, [r7, #24]
        break;
 8003cd6:	e013      	b.n	8003d00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe fd1a 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61b8      	str	r0, [r7, #24]
        break;
 8003cde:	e00f      	b.n	8003d00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8003e1c <UART_SetConfig+0x268>)
 8003ce2:	61bb      	str	r3, [r7, #24]
        break;
 8003ce4:	e00c      	b.n	8003d00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe fc91 	bl	800260c <HAL_RCC_GetSysClockFreq>
 8003cea:	61b8      	str	r0, [r7, #24]
        break;
 8003cec:	e008      	b.n	8003d00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf2:	61bb      	str	r3, [r7, #24]
        break;
 8003cf4:	e004      	b.n	8003d00 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8003cfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d074      	beq.n	8003df0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	005a      	lsls	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	441a      	add	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	d916      	bls.n	8003d50 <UART_SetConfig+0x19c>
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d212      	bcs.n	8003d50 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f023 030f 	bic.w	r3, r3, #15
 8003d32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	89fb      	ldrh	r3, [r7, #14]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	89fa      	ldrh	r2, [r7, #14]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	e04f      	b.n	8003df0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77bb      	strb	r3, [r7, #30]
 8003d54:	e04c      	b.n	8003df0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d56:	7ffb      	ldrb	r3, [r7, #31]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d828      	bhi.n	8003dae <UART_SetConfig+0x1fa>
 8003d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <UART_SetConfig+0x1b0>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe fca0 	bl	80026cc <HAL_RCC_GetPCLK1Freq>
 8003d8c:	61b8      	str	r0, [r7, #24]
        break;
 8003d8e:	e013      	b.n	8003db8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fcbe 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 8003d94:	61b8      	str	r0, [r7, #24]
        break;
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <UART_SetConfig+0x268>)
 8003d9a:	61bb      	str	r3, [r7, #24]
        break;
 8003d9c:	e00c      	b.n	8003db8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fc35 	bl	800260c <HAL_RCC_GetSysClockFreq>
 8003da2:	61b8      	str	r0, [r7, #24]
        break;
 8003da4:	e008      	b.n	8003db8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e004      	b.n	8003db8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	77bb      	strb	r3, [r7, #30]
        break;
 8003db6:	bf00      	nop
    }

    if (pclk != 0U)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d018      	beq.n	8003df0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	085a      	lsrs	r2, r3, #1
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	441a      	add	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d909      	bls.n	8003dec <UART_SetConfig+0x238>
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dde:	d205      	bcs.n	8003dec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	e001      	b.n	8003df0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003dfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	efff69f3 	.word	0xefff69f3
 8003e0c:	40013800 	.word	0x40013800
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40004400 	.word	0x40004400
 8003e18:	40004800 	.word	0x40004800
 8003e1c:	007a1200 	.word	0x007a1200

08003e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01a      	beq.n	8003f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f1e:	d10a      	bne.n	8003f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b098      	sub	sp, #96	@ 0x60
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f74:	f7fc fd46 	bl	8000a04 <HAL_GetTick>
 8003f78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d12e      	bne.n	8003fe6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f88c 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d021      	beq.n	8003fe6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e6      	bne.n	8003fa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e062      	b.n	80040ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d149      	bne.n	8004088 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f856 	bl	80040b4 <UART_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03c      	beq.n	8004088 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	623b      	str	r3, [r7, #32]
   return(result);
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
 800402e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e6      	bne.n	800400e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3308      	adds	r3, #8
 800405e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004060:	61fa      	str	r2, [r7, #28]
 8004062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	69b9      	ldr	r1, [r7, #24]
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	617b      	str	r3, [r7, #20]
   return(result);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e011      	b.n	80040ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3758      	adds	r7, #88	@ 0x58
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c4:	e04f      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040cc:	d04b      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fc fc99 	bl	8000a04 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e04e      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d037      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b80      	cmp	r3, #128	@ 0x80
 80040fa:	d034      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	d031      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b08      	cmp	r3, #8
 800410e:	d110      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2208      	movs	r2, #8
 8004116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f838 	bl	800418e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2208      	movs	r2, #8
 8004122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e029      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004140:	d111      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800414a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f81e 	bl	800418e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e00f      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	429a      	cmp	r2, r3
 8004182:	d0a0      	beq.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800418e:	b480      	push	{r7}
 8004190:	b095      	sub	sp, #84	@ 0x54
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004200:	2b01      	cmp	r3, #1
 8004202:	d118      	bne.n	8004236 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	60bb      	str	r3, [r7, #8]
   return(result);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	647b      	str	r3, [r7, #68]	@ 0x44
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6979      	ldr	r1, [r7, #20]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e6      	bne.n	8004204 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800424a:	bf00      	nop
 800424c:	3754      	adds	r7, #84	@ 0x54
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <memset>:
 8004256:	4402      	add	r2, r0
 8004258:	4603      	mov	r3, r0
 800425a:	4293      	cmp	r3, r2
 800425c:	d100      	bne.n	8004260 <memset+0xa>
 800425e:	4770      	bx	lr
 8004260:	f803 1b01 	strb.w	r1, [r3], #1
 8004264:	e7f9      	b.n	800425a <memset+0x4>
	...

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	@ (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	@ (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	@ (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	@ (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f818 	bl	80042b0 <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004300 	.word	0x08004300
 80042a4:	08004300 	.word	0x08004300
 80042a8:	08004300 	.word	0x08004300
 80042ac:	08004304 	.word	0x08004304

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr
